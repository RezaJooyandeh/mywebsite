var Ang03_04 = {
	vertices: [[5202, -6027], [9200, 900], [1200, 900], [5202, -1407]],
	edges: [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]],
	viewbox: "1057 -6110 8286 7092"
};

var Ang03_05 = {
	vertices: [[5200, -6028], [9200, 900], [1200, 900], [4443, -969], [6282, -2032]],
	edges: [[0, 1], [0, 2], [0, 3], [0, 4], [1, 2], [1, 3], [1, 4], [2, 3], [3, 4]],
	viewbox: "1057 -6160 8286 7202"
};

var Ang03_06 = {
	vertices: [[5200, -6028], [9200, 900], [1200, 900], [3867, -1875], [5200, -484], [6532, -1871]],
	edges: [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 2], [1, 4], [1, 5], [2, 3], [2, 4], [3, 4], [4, 5]],
	viewbox: "1057 -6110 8286 7092"
};

var Ang03_07 = {
	vertices: [[5126, -1178], [5123, -5801], [3798, -1952], [1125, 1125], [5123, 358], [9125, 1125], [6461, -1949]],
	edges: [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [1, 2], [1, 3], [1, 5], [1, 6], [2, 3], [3, 4], [3, 5], [4, 5], [5, 6]],
	viewbox: "982 -5883 8286 7090"
};

var Ang04_05 = {
	vertices: [[6856, 6856], [1200, 6856], [6856, 1200], [1200, 1200], [4028, 4028]],
	edges: [[0, 1], [0, 2], [1, 3], [1, 4], [2, 3], [2, 4]],
	viewbox: "1117 1058 5822 5940"
};

var Ang04_06 = {
	vertices: [[6856, 6856], [1200, 6856], [6856, 1200], [1200, 1200], [2614, 2614], [5442, 5442]],
	edges: [[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5]],
	viewbox: "1117 1058 5822 5940"
};

var Ang04_07 = {
	vertices: [[6856, 6856], [1200, 6856], [6856, 1200], [1200, 1200], [2614, 2614], [4028, 4028], [5442, 5442]],
	edges: [[0, 1], [0, 2], [1, 3], [1, 4], [1, 6], [2, 3], [2, 4], [2, 6], [4, 5], [5, 6]],
	viewbox: "1117 1058 5822 5940"
};

var Ang04_08 = {
	vertices: [[6856, 6856], [1200, 6856], [6856, 1200], [5248, 5248], [2808, 5248], [1200, 1200], [5248, 2808], [2808, 2808]],
	edges: [[0, 1], [0, 2], [0, 3], [1, 4], [1, 5], [2, 5], [2, 6], [3, 4], [3, 6], [4, 7], [5, 7], [6, 7]],
	viewbox: "1117 1058 5822 5940"
};

var Ang05_08 = {
	vertices: [[5070, 5070], [8662, 5070], [9772, 1654], [6865, -456], [3960, 1654], [6865, 3764], [6865, 951], [6865, 2357]],
	edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [4, 5], [5, 2], [3, 6], [6, 7], [7, 5]],
	viewbox: "3947 -588 5757 5802"
};

var Ang05_11 = {
	vertices: [[5070, 5070], [8662, 5070], [9772, 1654], [6865, -456], [3960, 1654], [5897, 1254], [7835, 1254], [6865, 2764], [6865, 3764], [5967, 4417], [7763, 4417]],
	edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [4, 5], [5, 6], [6, 2], [4, 7], [7, 2], [0, 9], [9, 8], [8, 10], [10, 1], [7, 8]],
	viewbox: "3947 -588 5757 5802"
};

var Ang05_14 = {
	vertices: [[5070, 5070], [8662, 5070], [9772, 1654], [6865, -456], [3960, 1654], [6865, 2598], [5968, 3834], [7764, 3834], [5413, 2126], [6865, 1071], [8433, 3107], [9103, 2381], [4928, 1460], [5897, 1265]],
	edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [4, 8], [8, 5], [5, 6], [6, 0], [3, 9], [9, 8], [2, 5], [5, 7], [7, 1], [2, 11], [11, 10], [10, 7], [4, 12], [12, 13], [13, 9]],
	viewbox: "3947 -588 5757 5802"
};

var Ang05_17 = {
	vertices: [[5070, 5070], [8662, 5070], [9772, 1654], [6865, -456], [3960, 1654], [5413, 1654], [6865, 1654], [8319, 1654], [5229, 2792], [8433, 2792], [8548, 3929], [6831, 2792], [6244, 3551], [5657, 4311], [7514, 3266], [6984, 4595], [6865, 600]],
	edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0], [4, 5], [5, 6], [6, 7], [7, 2], [3, 16], [16, 6], [6, 8], [8, 0], [7, 9], [9, 10], [10, 1], [8, 11], [11, 9], [11, 12], [12, 13], [13, 0], [12, 14], [14, 10], [13, 15], [15, 10]],
	viewbox: "3947 -588 5757 5802"
};

var Ang_Drawing_Settings = {
	edge_width: 30,
	vertex_stroke: 30,
	vertex_radius: 110
};

var Hypo_40 = {
	vertices: [[269, 362], [314, 327], [220, 332], [252, 428], [351, 420], [379, 331], [311, 241], [245, 235], [207, 270], [176, 373], [185, 434], [287, 469], [430, 436], [435, 362], [394, 272], [358, 229], [281, 159], [219, 140], [153, 267], [130, 347], [130, 472], [205, 524], [482, 479], [478, 285], [444, 244], [380, 175], [348, 132], [312, 56], [139, 210], [89, 407], [0, 566], [566, 566], [525, 194], [440, 176], [400, 86], [566, 0], [92, 93], [56, 316], [0, 0], [470, 121]],
	edges: [[0, 1], [0, 2], [0, 3], [1, 0], [1, 4], [1, 5], [1, 6], [1, 7], [2, 0], [2, 8], [2, 9], [3, 0], [3, 10], [3, 11], [4, 1], [4, 11], [4, 12], [5, 1], [5, 13], [5, 14], [6, 1], [6, 15], [6, 16], [7, 1], [7, 17], [7, 8], [8, 2], [8, 7], [8, 18], [9, 2], [9, 19], [9, 10], [10, 3], [10, 9], [10, 20], [11, 3], [11, 21], [11, 4], [12, 4], [12, 22], [12, 13], [13, 5], [13, 12], [13, 23], [14, 5], [14, 24], [14, 15], [15, 6], [15, 14], [15, 25], [16, 6], [16, 26], [16, 17], [17, 7], [17, 16], [17, 27], [17, 28], [18, 8], [18, 28], [18, 19], [19, 9], [19, 18], [19, 29], [20, 10], [20, 29], [20, 21], [21, 11], [21, 20], [21, 30], [21, 22], [22, 12], [22, 21], [22, 31], [22, 32], [23, 13], [23, 32], [23, 24], [24, 14], [24, 23], [24, 33], [25, 15], [25, 33], [25, 26], [26, 16], [26, 25], [26, 34], [27, 17], [27, 34], [27, 35], [27, 36], [28, 17], [28, 37], [28, 18], [29, 19], [29, 37], [29, 20], [30, 21], [30, 37], [30, 38], [30, 31], [31, 22], [31, 30], [31, 35], [32, 22], [32, 35], [32, 39], [32, 23], [33, 24], [33, 39], [33, 25], [34, 26], [34, 39], [34, 27], [35, 27], [35, 32], [35, 31], [35, 38], [36, 27], [36, 38], [36, 37], [37, 28], [37, 36], [37, 30], [37, 29], [38, 30], [38, 36], [38, 35], [39, 32], [39, 34], [39, 33]],
	viewbox: "-15 -15 597 597",
	hypo_cycles: [
		[39, 32, 22, 12, 4, 1, 5, 13, 23, 24, 14, 15, 6, 16, 17, 7, 8, 2, 9, 19, 18, 28, 37, 29, 20, 10, 3, 11, 21, 30, 31, 35, 38, 36, 27, 34, 26, 25, 33],
		[0, 2, 8, 7, 17, 16, 6, 15, 14, 5, 13, 23, 24, 33, 25, 26, 34, 39, 32, 35, 27, 36, 38, 30, 31, 22, 12, 4, 11, 21, 20, 29, 37, 28, 18, 19, 9, 10, 3],
		[0, 3, 10, 9, 19, 18, 8, 7, 17, 28, 37, 29, 20, 21, 11, 4, 12, 22, 32, 35, 31, 30, 38, 36, 27, 34, 39, 33, 24, 23, 13, 5, 14, 15, 25, 26, 16, 6, 1],
		[0, 1, 4, 11, 21, 30, 38, 35, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 36, 37, 28, 17, 7, 8, 18, 19, 29, 20, 10, 9, 2],
		[0, 1, 5, 13, 12, 22, 31, 30, 38, 35, 32, 23, 24, 14, 15, 6, 16, 26, 25, 33, 39, 34, 27, 36, 37, 28, 17, 7, 8, 18, 19, 29, 20, 21, 11, 3, 10, 9, 2],
		[0, 1, 6, 15, 14, 24, 23, 13, 12, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 31, 22, 32, 35, 38, 36, 27, 34, 39, 33, 25, 26, 16, 17, 7, 8, 2],
		[0, 1, 7, 17, 16, 26, 25, 15, 14, 5, 13, 12, 4, 11, 3, 10, 9, 19, 29, 20, 21, 30, 38, 35, 31, 22, 32, 23, 24, 33, 39, 34, 27, 36, 37, 28, 18, 8, 2],
		[0, 1, 4, 11, 3, 10, 9, 19, 29, 20, 21, 30, 37, 36, 38, 35, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 17, 28, 18, 8, 2],
		[0, 1, 7, 17, 28, 18, 19, 29, 20, 21, 22, 31, 30, 37, 36, 38, 35, 27, 34, 26, 16, 6, 15, 25, 33, 39, 32, 23, 24, 14, 5, 13, 12, 4, 11, 3, 10, 9, 2],
		[0, 1, 4, 11, 3, 10, 20, 29, 19, 18, 28, 37, 36, 38, 35, 31, 30, 21, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 17, 7, 8, 2],
		[0, 1, 4, 12, 22, 31, 30, 38, 36, 27, 35, 32, 39, 34, 26, 25, 33, 24, 23, 13, 5, 14, 15, 6, 16, 17, 7, 8, 2, 9, 19, 18, 28, 37, 29, 20, 21, 11, 3],
		[0, 1, 4, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 35, 38, 36, 37, 30, 31, 22, 21, 20, 29, 19, 18, 28, 17, 7, 8, 2, 9, 10, 3],
		[0, 1, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 38, 36, 27, 35, 31, 22, 32, 39, 34, 26, 25, 33, 24, 23, 13, 5, 14, 15, 6, 16, 17, 7, 8, 2],
		[0, 1, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 17, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 38, 35, 31, 30, 21, 22, 12, 4, 11, 3],
		[0, 1, 5, 13, 12, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 38, 36, 27, 35, 31, 22, 32, 23, 24, 33, 39, 34, 26, 25, 15, 6, 16, 17, 7, 8, 2],
		[0, 1, 6, 16, 26, 25, 33, 24, 14, 5, 13, 23, 32, 39, 34, 27, 17, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 38, 35, 31, 30, 21, 22, 12, 4, 11, 3],
		[0, 1, 6, 15, 14, 5, 13, 23, 24, 33, 25, 26, 34, 39, 32, 22, 12, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 31, 35, 38, 36, 27, 17, 7, 8, 2],
		[0, 1, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 38, 30, 21, 22, 31, 35, 27, 34, 26, 16, 6, 15, 25, 33, 39, 32, 23, 24, 14, 5, 13, 12, 4, 11, 3],
		[0, 1, 4, 11, 3, 10, 9, 19, 29, 20, 21, 30, 38, 35, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 36, 37, 28, 17, 7, 8, 2],
		[0, 1, 4, 12, 22, 31, 30, 38, 36, 27, 35, 32, 39, 34, 26, 25, 33, 24, 23, 13, 5, 14, 15, 6, 16, 17, 7, 8, 18, 28, 37, 29, 20, 21, 11, 3, 10, 9, 2],
		[0, 1, 4, 11, 21, 30, 38, 35, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 36, 37, 29, 19, 18, 28, 17, 7, 8, 2, 9, 10, 3],
		[0, 1, 5, 13, 23, 32, 39, 34, 26, 25, 33, 24, 14, 15, 6, 16, 17, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 27, 35, 38, 30, 31, 22, 12, 4, 11, 3],
		[0, 1, 4, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 17, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 38, 35, 31, 30, 21, 11, 3],
		[0, 1, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 31, 22, 12, 13, 5, 14, 24, 33, 39, 32, 35, 38, 36, 27, 34, 26, 25, 15, 6, 16, 17, 7, 8, 2],
		[0, 1, 4, 12, 22, 31, 30, 38, 35, 32, 23, 13, 5, 14, 15, 6, 16, 26, 25, 33, 39, 34, 27, 36, 37, 28, 17, 7, 8, 18, 19, 29, 20, 21, 11, 3, 10, 9, 2],
		[0, 1, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 31, 22, 12, 13, 5, 14, 15, 6, 16, 26, 34, 39, 33, 24, 23, 32, 35, 38, 36, 27, 17, 7, 8, 2],
		[0, 1, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 31, 22, 12, 13, 5, 14, 24, 23, 32, 35, 38, 36, 27, 34, 39, 33, 25, 15, 6, 16, 17, 7, 8, 2],
		[0, 1, 4, 12, 22, 31, 35, 32, 39, 34, 26, 25, 33, 24, 23, 13, 5, 14, 15, 6, 16, 17, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 38, 30, 21, 11, 3],
		[0, 1, 4, 11, 3, 10, 20, 29, 37, 36, 38, 35, 31, 30, 21, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 17, 7, 8, 18, 19, 9, 2],
		[0, 1, 4, 11, 3, 10, 20, 21, 30, 38, 35, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 36, 37, 28, 17, 7, 8, 18, 19, 9, 2],
		[0, 1, 4, 11, 21, 20, 29, 19, 18, 28, 37, 36, 38, 35, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 17, 7, 8, 2, 9, 10, 3],
		[0, 1, 4, 12, 22, 32, 39, 34, 26, 25, 33, 24, 23, 13, 5, 14, 15, 6, 16, 17, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 27, 35, 38, 30, 21, 11, 3],
		[0, 1, 5, 13, 23, 24, 14, 15, 6, 16, 26, 25, 33, 39, 34, 27, 17, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 38, 35, 31, 30, 21, 22, 12, 4, 11, 3],
		[0, 1, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 38, 36, 27, 35, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 34, 26, 25, 15, 6, 16, 17, 7, 8, 2],
		[0, 1, 5, 13, 23, 24, 14, 15, 6, 16, 26, 25, 33, 39, 32, 22, 12, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 31, 35, 38, 36, 27, 17, 7, 8, 2],
		[0, 1, 4, 11, 21, 20, 29, 19, 18, 28, 37, 36, 38, 30, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 17, 7, 8, 2, 9, 10, 3],
		[0, 1, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 38, 35, 31, 22, 12, 13, 5, 14, 24, 23, 32, 39, 33, 25, 15, 6, 16, 26, 34, 27, 17, 7, 8, 2],
		[0, 1, 5, 13, 23, 24, 14, 15, 6, 16, 26, 25, 33, 39, 34, 27, 36, 38, 30, 31, 35, 32, 22, 12, 4, 11, 21, 20, 29, 19, 18, 28, 17, 7, 8, 2, 9, 10, 3],
		[0, 1, 4, 12, 22, 32, 39, 34, 26, 25, 33, 24, 23, 13, 5, 14, 15, 6, 16, 17, 7, 8, 2, 9, 10, 20, 29, 19, 18, 28, 37, 36, 27, 35, 31, 30, 21, 11, 3],
		[0, 1, 4, 11, 3, 10, 9, 19, 18, 28, 37, 29, 20, 21, 30, 38, 36, 27, 34, 26, 25, 33, 24, 23, 32, 35, 31, 22, 12, 13, 5, 14, 15, 6, 16, 17, 7, 8, 2]
	]
};
var Hypo_Drawing_Settings = {
	edge_width: 2,
	vertex_stroke: 1,
	vertex_radius: 10,
	edge_dasharray: "5 10",
	special_vertex_stroke: 6,
	special_vertex_radius: 12,
	cycle_stroke: 3
};

function DrawGraph(container, graph, settings, width, height) {
	var vertices = graph.vertices;
	var edges = graph.edges;
	var images = graph.images;
	var labels = graph.labels;
	var viewbox = graph.viewbox;
	var hoverLabels = graph.hoverLabels;
	var edge_width = settings.edge_width;
	var vertex_stroke = settings.vertex_stroke;
	var vertex_radius = settings.vertex_radius;
	var textColor = "white";
	if (settings.textColor)
		textColor = settings.textColor;

	var edgeWeights;
	if (graph.edgeWeights)
		edgeWeights = graph.edgeWeights;
	else
		edgeWeights = edges.map(function (x) { return 1; });

	var vertexFill = "#000000";
	if (settings.vertexFill)
		vertexFill = settings.vertexFill;

	var vertexStroke = "#000000";
	if (settings.vertexStroke)
		vertexStroke = settings.vertexStroke;

	var edgeFill = "#000000";
	if (settings.edgeFill)
		edgeFill = settings.edgeFill;

	var svg = [];
	svg.push("<svg width=\"", width, "\" height=\"", height, "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"");
	if (viewbox)
		svg.push("viewBox=\"" + viewbox + "\"");
	svg.push(">");
	if (images) {
		svg.push("\t<defs>\n");
		for (var v = 0; v < vertices.length; v++) {
			svg.push("\t\t<clipPath id=\"v", v, "\">");
			svg.push("\t\t\t<circle cx=\"", vertices[v][0], "\" cy=\"", vertices[v][1], "\" r=\"", vertex_radius.toString(), "\"></circle>");
			svg.push("\t\t</clipPath>");
		}
		svg.push("\t</defs>");
	}
	svg.push("\t<g style=\"stroke-width: 0.025in; fill: none\">\n");
	svg.push("\t\t<!-- Edges -->\n");
	svg.push("\t\t<g style=\"stroke:", edgeFill, "; stroke-width: ", edge_width.toString(), "\">\n");
	for (var i = 0; i < edges.length; i++) {
		var e = edges[i];
		var strokeWidth = (edgeWeights[i] === 1) ? "" : " stroke-width=\"" + (edge_width * edgeWeights[i]) + "\"";
		svg.push("\t\t\t<line x1=\"", vertices[e[0]][0].toString(), "\" y1=\"", vertices[e[0]][1].toString(), "\" x2=\"", vertices[e[1]][0].toString(), "\" y2=\"", vertices[e[1]][1].toString(), "\"", strokeWidth, " />\n");
	}
	svg.push("\t\t</g>\n");

	svg.push("\t\t<!-- Vertices -->\n\n");
	svg.push("\t\t<g style=\"fill: ", vertexFill, "; stroke:", vertexStroke, "; stroke-width: ", vertex_stroke.toString(), ";\">\n");
	for (var v = 0; v < vertices.length; v++) {
		svg.push("\t\t\t<circle cx=\"", vertices[v][0], "\" cy=\"", vertices[v][1], "\" r=\"", vertex_radius.toString(), "\">\n");
		if (hoverLabels)
			svg.push("\t\t\t\t<title>", hoverLabels[v], "</title>\n");
		svg.push("\t\t\t</circle>");
	}
	svg.push("\t\t</g>\n");
	svg.push("\t</g>\n");
	if (images) {
		svg.push("\t<!-- Image Labels -->\n\n");
		svg.push("\t<g>\n");
		for (var v = 0; v < vertices.length; v++) {
			svg.push("\t\t<image xlink:href=\"", images[v], "\" clip-path=\"url(#v", v, ")\" x=\"", vertices[v][0] - vertex_radius, "\" y=\"", vertices[v][1] - vertex_radius, "\" width=\"", 2 * vertex_radius + 1, "\" height=\"", 2 * vertex_radius + 1, "\">\n");
			if (hoverLabels)
				svg.push("\t\t\t\t<title>", hoverLabels[v], "</title>\n");
			svg.push("\t\t\t</image>");
		}
		svg.push("\t</g>\n");
	}
	else if (labels) {
		svg.push("\t<!-- Labels -->\n\n");
		svg.push("\t<g style=\"text-anchor: middle; fill: ", textColor, "\">\n");
		for (var v = 0; v < vertices.length; v++) {
			svg.push("\t\t<text x=\"", vertices[v][0], "\" y=\"", vertices[v][1], "\" style=\"dominant-baseline: central; \">", labels[v], "\n");
			if (hoverLabels)
				svg.push("\t\t\t\t<title>", hoverLabels[v], "</title>\n");
			svg.push("\t\t\t</text>");
		}
		svg.push("\t</g>\n");
	}
	svg.push("</svg>\n");

	var containerElement = document.getElementById(container);
	containerElement.innerHTML = svg.join("");
}

function DrawHypoGraphCycle(graph, settings, special_vertex, width, height) {
	var vertices = graph.vertices;
	var edges = graph.edges;
	var viewbox = graph.viewbox;
	var edge_width = settings.edge_width;
	var vertex_stroke = settings.vertex_stroke;
	var vertex_radius = settings.vertex_radius;
	var edge_dasharray = settings.edge_dasharray;
	var special_vertex_stroke = settings.special_vertex_stroke;
	var special_vertex_radius = settings.special_vertex_radius;
	var cycle_stroke = settings.cycle_stroke;

	var hypo_cycle = graph.hypo_cycles[special_vertex];

	var svg = [];
	svg.push("<svg width=\"", width, "\" height=\"", height, "\" version=\"1.1\"");
	if (viewbox)
		svg.push("viewBox=\"" + viewbox + "\"");
	svg.push(" xmlns=\"http://www.w3.org/2000/svg\">");
	svg.push("\t<g style=\"stroke-width: 0.025in; fill: none\">\n");
	svg.push("\t\t<!-- Edges -->\n");
	svg.push("\t\t<g style=\"stroke: #000000; stroke-dasharray: ", edge_dasharray, "; stroke-width: ", edge_width.toString(), "\">\n");
	for (var i = 0; i < edges.length; i++) {
		var e = edges[i];

		var isInCycle = false;
		for (var j = 0; j < hypo_cycle.Length; j++)
		{
			var v1 = hypo_cycle[j];
			var v2 = hypo_cycle[(j == hypo_cycle.length - 1) ? 0 : j + 1];
			if (((v1 == e[0]) && (v2 == e[1])) ||
				((v1 == e[1]) && (v2 == e[0])))
			{
				isInCycle = true;
				break;
			}
		}
		if (!isInCycle)
			svg.push("\t\t\t<line x1=\"", vertices[e[0]][0].toString(), "\" y1=\"", vertices[e[0]][1].toString(), "\" x2=\"", vertices[e[1]][0].toString(), "\" y2=\"", vertices[e[1]][1].toString(), "\" />\n");
	}
	svg.push("\t\t</g>\n");

	svg.push("\t\t\t<polygon style=\"stroke: #000000; stroke-width: ", cycle_stroke.toString(), "; fill: none\" points=\"");
	for (var j = 0; j < hypo_cycle.length; j++) {
		svg.push(vertices[hypo_cycle[j]][0].toString(), ", ", vertices[hypo_cycle[j]][1].toString(), " ");
	}
	svg.push("\" />\n");

	svg.push("\t\t<!-- Vertices -->\n\n");
	svg.push("\t\t<g style=\"fill: #000000; stroke:#000000; stroke-width: ", vertex_stroke.toString(), ";\">\n");
	for (var v = 0; v < vertices.length; v++) {
		if (i == special_vertex)
			svg.push("\t\t\t<circle cx=\"", vertices[v][0], "\" cy=\"", vertices[v][1], "\" r=\"", special_vertex_radius.toString(), "\" style=\"stroke-width: ", special_vertex_stroke.toString(), "\" />\n");
		else
			svg.push("\t\t\t<circle cx=\"", vertices[v][0], "\" cy=\"", vertices[v][1], "\" r=\"", vertex_radius.toString(), "\" />\n");
	}
	svg.push("\t\t</g>\n");

	svg.push("\t</g>\n");
	svg.push("</svg>\n");

	return svg.join("");
}

function DrawHypoGraphAllCycle(container, graph, settings, width, height)
{
	var content = [];
	for (var special_vertex = 0; special_vertex < graph.vertices.length; special_vertex++) {
		content.push(DrawHypoGraphCycle(graph, settings, special_vertex, width, height));
	}
	var containerElement = document.getElementById(container);
	containerElement.innerHTML = content.join("");
}
